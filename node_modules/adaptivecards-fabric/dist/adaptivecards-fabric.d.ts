declare module 'adaptivecards-fabric/utils/shared' {
	import * as React from "react";
	import * as AC from "adaptivecards";
	export const getDiv: () => HTMLDivElement;
	export abstract class ReactCardElement extends AC.CardElement {
	    protected abstract renderReact(): JSX.Element;
	    protected internalRender(): HTMLElement;
	}
	export abstract class ReactCardElementContainer extends AC.Container {
	    protected abstract renderReact(): JSX.Element;
	    protected internalRender(): HTMLElement;
	}
	export abstract class ReactInputElement extends AC.Input {
	    private _value;
	    private _inlineAction;
	    protected abstract renderReact(): JSX.Element;
	    protected internalRender(): HTMLElement;
	    protected overrideInternalRender(): HTMLElement;
	    protected handleChange: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void;
	    value: string;
	    inlineAction: AC.Action;
	    private buildInlineActionButton;
	    private inlineActionClickHandler;
	    private inlineIconActionButton;
	    private buildTextOnlyInlineActionActionButton;
	}
	export const raiseParseError: (error: AC.IValidationError, errors: AC.IValidationError[]) => void;
	export const getIntValue: (val: any, errors?: AC.IValidationError[], defaultValue?: number) => number;

}
declare module 'adaptivecards-fabric/components/inputs/InputChoiceSetFabric' {
	/// <reference types="react" />
	import * as AC from "adaptivecards";
	import * as Shared from 'adaptivecards-fabric/utils/shared';
	export class InputChoiceSetFabric extends Shared.ReactInputElement {
	    private isMultiSelect;
	    private choices;
	    private style;
	    private selectedValues;
	    parse: (json: any, errors?: AC.IValidationError[]) => void;
	    protected renderReact: () => JSX.Element;
	    getJsonTypeName: () => string;
	    toJSON: () => any;
	    private parseChoises;
	    private isCompact;
	    private ComboBox;
	    private createExpandedView;
	    private createChoiceGroup;
	    private inputChoicesToCheckbox;
	    private defaultValueToArray;
	    private inputChoicesToComboBoxOptions;
	    private inputChoicesToChoiceGroupOptions;
	    private handleChoiceGroupChange;
	    private handleComboBoxChange;
	    private updateMultiselectData;
	    private updateSelectedValues;
	    private removeItemFromArray;
	}

}
declare module 'adaptivecards-fabric/components/inputs/InputDateFabric' {
	/// <reference types="react" />
	import * as AC from "adaptivecards";
	import * as Shared from 'adaptivecards-fabric/utils/shared';
	export class InputDateFabric extends Shared.ReactInputElement {
	    private date;
	    private placeholder;
	    private minDate;
	    private maxDate;
	    protected renderReact: () => JSX.Element;
	    getJsonTypeName: () => string;
	    parse: (json: any, errors?: AC.IValidationError[]) => void;
	    toJSON: () => any;
	    private parseDates;
	    private getDate;
	    private buildDatePicker;
	    private handleSelectDate;
	}

}
declare module 'adaptivecards-fabric/components/inputs/InputNumberFabric' {
	/// <reference types="react" />
	import * as AC from "adaptivecards";
	import * as Shared from 'adaptivecards-fabric/utils/shared';
	export class InputNumberFabric extends Shared.ReactInputElement {
	    private max?;
	    private min?;
	    private placeholder;
	    parse: (json: any, errors?: AC.IValidationError[]) => void;
	    protected renderReact: () => JSX.Element;
	    getJsonTypeName: () => string;
	    toJSON: () => any;
	}

}
declare module 'adaptivecards-fabric/components/inputs/InputTextFabric' {
	/// <reference types="react" />
	import * as Shared from 'adaptivecards-fabric/utils/shared';
	export class InputTextFabric extends Shared.ReactInputElement {
	    private isMultiline;
	    private maxLength;
	    private placeholder;
	    private label;
	    private style;
	    protected renderReact: () => JSX.Element;
	    getJsonTypeName: () => string;
	    parse: (json: any, errors?: any) => void;
	    toJSON: () => any;
	    private buildInput;
	    private handleKeyDown;
	}

}
declare module 'adaptivecards-fabric/components/inputs/InputTimeFabric' {
	/// <reference types="react" />
	import * as AC from "adaptivecards";
	import * as Shared from 'adaptivecards-fabric/utils/shared';
	export class InputTimeFabric extends Shared.ReactInputElement {
	    private placeholder;
	    private min;
	    private max;
	    parse: (json: any, errors?: AC.IValidationError[]) => void;
	    protected renderReact: () => JSX.Element;
	    getJsonTypeName: () => string;
	    toJSON: () => any;
	}

}
declare module 'adaptivecards-fabric/components/inputs/InputToggleFabric' {
	/// <reference types="react" />
	import * as AC from "adaptivecards";
	import * as Shared from 'adaptivecards-fabric/utils/shared';
	export class InputToggleFabric extends Shared.ReactInputElement {
	    private valueOn;
	    private valueOff;
	    parse: (json: any, errors?: AC.IValidationError[]) => void;
	    protected renderReact: () => JSX.Element;
	    getJsonTypeName: () => string;
	    toJSON: () => any;
	    private handleToggleChange;
	}

}
declare module 'adaptivecards-fabric/components/inputs/index' {
	export * from 'adaptivecards-fabric/components/inputs/InputChoiceSetFabric';
	export * from 'adaptivecards-fabric/components/inputs/InputDateFabric';
	export * from 'adaptivecards-fabric/components/inputs/InputNumberFabric';
	export * from 'adaptivecards-fabric/components/inputs/InputTextFabric';
	export * from 'adaptivecards-fabric/components/inputs/InputTimeFabric';
	export * from 'adaptivecards-fabric/components/inputs/InputToggleFabric';

}
declare module 'adaptivecards-fabric/actions/ActionButton' {
	/// <reference types="react" />
	import * as AC from "adaptivecards";
	export interface ActionButtonProps {
	    text: string;
	    className?: string;
	    iconUrl?: string;
	    iconPlacement?: AC.ActionIconPlacement;
	    iconSize?: number;
	}
	export const ActionButton: (props: ActionButtonProps) => JSX.Element;

}
declare module 'adaptivecards-fabric/actions/Actions' {
	import * as AC from "adaptivecards";
	export const createActionDiv: (title: string, iconUrl: string, baseCssClass: string, iconPlacement: AC.ActionIconPlacement, iconSize: number) => HTMLDivElement;
	export class OpenUrlActionFabric extends AC.OpenUrlAction {
	    private internalRenderedElement;
	    readonly renderedElement: HTMLElement;
	    render(baseCssClass?: string): void;
	}
	export class SubmitActionFabric extends AC.SubmitAction {
	    private internalRenderedElement;
	    readonly renderedElement: HTMLElement;
	    render(baseCssClass?: string): void;
	}
	export class ShowCardActionFabric extends AC.ShowCardAction {
	    private internalRenderedElement;
	    readonly renderedElement: HTMLElement;
	    render(baseCssClass?: string): void;
	}
	export class ToggleVisibilityActionFabric extends AC.ToggleVisibilityAction {
	    private internalRenderedElement;
	    readonly renderedElement: HTMLElement;
	    render(baseCssClass?: string): void;
	}

}
declare module 'adaptivecards-fabric/actions/index' {
	export * from 'adaptivecards-fabric/actions/Actions';

}
declare module 'adaptivecards-fabric/components/Fabric' {
	export const useFabricComponents: () => void;

}
declare module 'adaptivecards-fabric/components/index' {
	export * from 'adaptivecards-fabric/components/inputs';
	export * from 'adaptivecards-fabric/components/Fabric';

}
declare module 'adaptivecards-fabric/index' {
	export * from 'adaptivecards-fabric/components';
	export * from 'adaptivecards-fabric/actions';
	export * from 'adaptivecards-fabric/utils/shared';

}
