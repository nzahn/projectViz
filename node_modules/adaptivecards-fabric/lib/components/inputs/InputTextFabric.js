"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var office_ui_fabric_react_1 = require("office-ui-fabric-react");
var AC = require("adaptivecards");
var Shared = require("../../utils/shared");
var InputTextFabric = /** @class */ (function (_super) {
    __extends(InputTextFabric, _super);
    function InputTextFabric() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.style = AC.InputTextStyle.Text;
        _this.renderReact = function () {
            return _this.buildInput();
        };
        _this.getJsonTypeName = function () { return "Input.Text"; };
        _this.parse = function (json, errors) {
            _super.prototype.parse.call(_this, json, errors);
            _this.value = _this.defaultValue;
            _this.isMultiline = AC.getBoolValue(json.isMultiline, false);
            _this.maxLength = Shared.getIntValue(json.maxLength);
            _this.placeholder = AC.getStringValue(json.placeholder);
            _this.label = AC.getStringValue(json.label);
            _this.style = AC.getEnumValue(AC.InputTextStyle, json.style, AC.InputTextStyle.Text);
            _this.inlineAction = AC.createActionInstance(_this, json.inlineAction, [AC.ShowCardAction.JsonTypeName], false, errors);
        };
        _this.toJSON = function () {
            var result = _super.prototype.toJSON.call(_this);
            AC.setProperty(result, "placeholder", _this.placeholder);
            AC.setProperty(result, "maxLength", _this.maxLength, 0);
            AC.setProperty(result, "isMultiline", _this.isMultiline, false);
            AC.setEnumProperty(AC.InputTextStyle, result, "style", _this.style, AC.InputTextStyle.Text);
            if (_this.inlineAction) {
                AC.setProperty(result, "inlineAction", _this.inlineAction.toJSON());
            }
            return result;
        };
        _this.buildInput = function () {
            return (React.createElement(office_ui_fabric_react_1.TextField, { id: _this.id, type: AC.InputTextStyle[_this.style].toLowerCase(), value: _this.defaultValue, multiline: _this.isMultiline, maxLength: _this.maxLength, placeholder: _this.placeholder, label: _this.label, onChange: _this.handleChange, onKeyDown: _this.handleKeyDown }));
        };
        _this.handleKeyDown = function (e) {
            // Enter pressed
            if (e.keyCode === 13 && _this.inlineAction) {
                _this.inlineAction.execute();
            }
        };
        return _this;
    }
    return InputTextFabric;
}(Shared.ReactInputElement));
exports.InputTextFabric = InputTextFabric;
//# sourceMappingURL=InputTextFabric.js.map