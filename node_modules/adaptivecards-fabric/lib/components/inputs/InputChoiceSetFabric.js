"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var AC = require("adaptivecards");
var FabricUI = require("office-ui-fabric-react");
var Shared = require("../../utils/shared");
var InputChoiceSetFabric = /** @class */ (function (_super) {
    __extends(InputChoiceSetFabric, _super);
    function InputChoiceSetFabric() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectedValues = [];
        _this.parse = function (json, errors) {
            _super.prototype.parse.call(_this, json, errors);
            _this.value = _this.defaultValue;
            _this.selectedValues = _this.defaultValueToArray(_this.value);
            _this.isMultiSelect = AC.getBoolValue(json.isMultiSelect, false);
            _this.title = AC.getStringValue(json.title);
            _this.style = AC.getStringValue(json.style);
            _this.parseChoises(json);
        };
        _this.renderReact = function () { return (_this.isCompact() ?
            React.createElement(_this.ComboBox, null) :
            _this.createExpandedView()); };
        _this.getJsonTypeName = function () { return "Input.ChoiceSet"; };
        _this.toJSON = function () {
            var result = _super.prototype.toJSON.call(_this);
            if (_this.choices.length > 0) {
                AC.setProperty(result, "choices", _this.choices.map(function (ch) { return ch.toJSON(); }));
            }
            if (!_this.isCompact()) {
                AC.setProperty(result, "style", "expanded", false);
            }
            AC.setProperty(result, "isMultiSelect", _this.isMultiSelect, false);
            return result;
        };
        _this.parseChoises = function (json) {
            _this.choices = Array.isArray(json.choices) ?
                json.choices.map(function (ch) {
                    var choice = new AC.Choice();
                    choice.parse(ch);
                    return choice;
                }) :
                [];
        };
        _this.isCompact = function () { return _this.style === "compact"; };
        _this.ComboBox = function () { return (React.createElement(FabricUI.ComboBox, { onChange: _this.handleComboBoxChange, id: _this.id, options: _this.inputChoicesToComboBoxOptions(_this.choices), multiSelect: _this.isMultiSelect, selectedKey: _this.defaultValueToArray(_this.value) })); };
        _this.createExpandedView = function () {
            return _this.isMultiSelect ?
                _this.inputChoicesToCheckbox() :
                _this.createChoiceGroup();
        };
        _this.createChoiceGroup = function () { return (React.createElement(FabricUI.ChoiceGroup, { id: _this.id, onChange: _this.handleChoiceGroupChange, options: _this.inputChoicesToChoiceGroupOptions(_this.choices, _this.defaultValueToArray(_this.value)), multiple: _this.isMultiSelect })); };
        _this.inputChoicesToCheckbox = function () { return (React.createElement(React.Fragment, null, _this.choices.map(function (c, i) {
            return React.createElement(FabricUI.Checkbox, { key: c.value, label: c.title, defaultChecked: _this.defaultValueToArray(_this.value).includes(c.value), onChange: function (ev, checked) {
                    _this.updateMultiselectData(checked, c.value);
                    ev.stopPropagation();
                    ev.preventDefault();
                }, styles: {
                    root: {
                        paddingTop: i > 0 ? _this.hostConfig.spacing.default : 0,
                    },
                } });
        }))); };
        _this.defaultValueToArray = function (value) {
            if (value) {
                return value.split(",");
            }
            return [];
        };
        _this.inputChoicesToComboBoxOptions = function (choices) {
            return choices.map(function (c) { return ({ key: c.value, text: c.title }); });
        };
        _this.inputChoicesToChoiceGroupOptions = function (choices, value) {
            return choices.map(function (c) { return ({ key: c.value, text: c.title, checked: value.includes(c.value) }); });
        };
        _this.handleChoiceGroupChange = function (ev, option) {
            _this.value = option.key;
            ev.stopPropagation();
            ev.preventDefault();
        };
        _this.handleComboBoxChange = function (event, option, index, value) {
            if (_this.isMultiSelect) {
                _this.updateMultiselectData(option.selected, option.key);
            }
            else {
                _this.value = "" + option.key;
            }
            event.stopPropagation();
            event.preventDefault();
        };
        _this.updateMultiselectData = function (selected, key) {
            _this.updateSelectedValues(selected, key);
            _this.value = _this.selectedValues.join(",");
        };
        _this.updateSelectedValues = function (selected, key) {
            selected ? _this.selectedValues.push(key) : _this.removeItemFromArray(_this.selectedValues, key);
        };
        _this.removeItemFromArray = function (arr, item) {
            var index = arr.indexOf(item);
            arr.splice(index, 1);
        };
        return _this;
    }
    return InputChoiceSetFabric;
}(Shared.ReactInputElement));
exports.InputChoiceSetFabric = InputChoiceSetFabric;
//# sourceMappingURL=InputChoiceSetFabric.js.map