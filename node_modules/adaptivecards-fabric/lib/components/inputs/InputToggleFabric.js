"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var AC = require("adaptivecards");
var FabricUI = require("office-ui-fabric-react");
var Shared = require("../../utils/shared");
var InputToggleFabric = /** @class */ (function (_super) {
    __extends(InputToggleFabric, _super);
    function InputToggleFabric() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.parse = function (json, errors) {
            _super.prototype.parse.call(_this, json, errors);
            _this.value = _this.defaultValue;
            _this.valueOn = AC.getStringValue(json.valueOn);
            _this.valueOff = AC.getStringValue(json.valueOff);
            _this.title = AC.getStringValue(json.title);
        };
        _this.renderReact = function () { return (React.createElement(FabricUI.Toggle, { id: _this.id, inlineLabel: true, onChange: _this.handleToggleChange, defaultChecked: _this.defaultValue === _this.valueOn, label: _this.title, styles: {
                root: {
                    marginBottom: 0,
                    marginTop: 0,
                },
            } })); };
        _this.getJsonTypeName = function () { return "Input.Toggle"; };
        _this.toJSON = function () {
            var result = _super.prototype.toJSON.call(_this);
            AC.setProperty(result, "valueOn", _this.valueOn, "true");
            AC.setProperty(result, "valueOff", _this.valueOff, "false");
            return result;
        };
        _this.handleToggleChange = function (event, checked) {
            _this.value = checked ? _this.valueOn : _this.valueOff;
        };
        return _this;
    }
    return InputToggleFabric;
}(Shared.ReactInputElement));
exports.InputToggleFabric = InputToggleFabric;
//# sourceMappingURL=InputToggleFabric.js.map